import com.sdl.dxa.builder.maven.MavenBuildTask
import com.sdl.dxa.builder.maven.MavenHelpTask

buildscript {
    repositories {
        mavenLocal()
    }
    //noinspection GroovyAssignabilityCheck
    dependencies {
        classpath group: 'com.sdl.dxa', name: 'dxa-builder', version: version
    }
}

defaultTasks 'buildDxa'

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

task help(type: MavenHelpTask)

task buildDxa(type: MavenBuildTask) {
    configurations = [
            ["dxa-bom"],
            ["dxa-bom-2013sp1", "dxa-bom-modules"],
            ["dxa-framework"],
            ["> dxa-webapp > clean archetype:create-from-project -Darchetype.properties=archetype.properties"]
    ]

    // special hook for archetypes as id does not inherit <profiles/> nor <build/> sections,
    // but we still need to sign artifact in case of release
    if (project.hasProperty('command') && project.command =~ /.*-P(.*\b)?release\b.*/) {
        configurations << ["> dxa-webapp/target/generated-sources/archetype > ${project.command} " +
                                   "org.apache.maven.plugins:maven-gpg-plugin:sign " +
                                   "org.apache.maven.plugins:maven-source-plugin:jar-no-fork " +
                                   "org.apache.maven.plugins:maven-javadoc-plugin:jar"]
    } else {
        configurations << ["dxa-webapp/target/generated-sources/archetype"]
    }

    if (project.hasProperty('command')) {
        command = project.command
    }

    verbose = project.hasProperty('verbose')

    if (project.hasProperty('mavenProperties')) {
        mavenProperties = project.mavenProperties
    }
}

task localRepoDxa(dependsOn: buildDxa, type: MavenBuildTask) {
    def commonPart = "install:install-file -DgroupId=com.sdl.dxa -Dversion=${version} -DlocalRepositoryPath=${projectDir}/local-project-repo"
    def pathFor = { String filePath, String artifact, String packaging ->
        "-Dfile=${filePath} -DartifactId=${artifact} -Dpackaging=${packaging}"
    }
    def jar = { String path, String artifact ->
        pathFor("${path}/${artifact}-${version}.jar", artifact, 'jar')
    }
    def pom = { String path, String artifact ->
        pathFor("${path}/pom.xml", artifact, 'pom')
    }

    configurations = [
            [
                    ">> ${commonPart} ${pom('dxa-bom', 'dxa-bom')}",
                    ">> ${commonPart} ${pom('dxa-bom-2013sp1', 'dxa-bom-2013sp1')}",
                    ">> ${commonPart} ${pom('dxa-bom-modules', 'dxa-bom-modules')}",

                    ">> ${commonPart} ${jar('dxa-builder/build/libs', 'dxa-builder')}",
                    ">> ${commonPart} ${jar('dxa-builder/build/libs', 'dxa-builder')} -Dclassifier=javadoc",
                    ">> ${commonPart} ${jar('dxa-builder/build/libs', 'dxa-builder')} -Dclassifier=sources",

                    ">> ${commonPart} ${pom('dxa-framework', 'dxa-framework')}",
                    ">> ${commonPart} ${jar('dxa-framework/dxa-common-api/target', 'dxa-common-api')}",
                    ">> ${commonPart} ${jar('dxa-framework/dxa-common-impl/target', 'dxa-common-impl')}",
                    ">> ${commonPart} ${jar('dxa-framework/dxa-tridion-provider/target', 'dxa-tridion-provider')}",
                    ">> ${commonPart} ${jar('dxa-framework/dxa-tridion-2013sp1-provider/target', 'dxa-tridion-2013sp1-provider')}",
                    ">> ${commonPart} ${jar('dxa-framework/dxa-web8-provider/target', 'dxa-web8-provider')}",

                    ">> ${commonPart} ${jar('dxa-webapp/target/generated-sources/archetype/target', 'dxa-webapp-archetype')}",
            ]
    ]
    verbose = project.hasProperty('verbose')
}
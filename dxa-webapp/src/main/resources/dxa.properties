#@formatter:off

# Basically all the properties have default values, and you don't need to set anything.
# The more you're closer to the end of this file, the less interesting the property is for you.
# You may want to look at Spring Beans configuration though. It's a 'flavour' of your application.

# This file is structured as following:
# First goes a comment about the property, what is it for. It is followed by all the possible values (in case it is a limited set) with explanation.
# Then goes the default value if any. If no default or not important, then it is commented out.

## DXA Properties. Modules properties are separated in other files.
## Check documentation and included CONFIGURATION_README file for details.

### ===================================================================================================================
### Used Spring beans, different flavours of some services, etc.
### ===================================================================================================================

# Two properties that define a set of enabled Spring profiles:

# spring.profiles.active property is defined once per all the configuration files; if defined in many places, then the latest is taken.
# Can be used as a main set of profiles.

# spring.profiles.include properties are merged from all the configuration files. Can be used to selectively turn on/off some of the profiles.
# Some of the values are found in modules properties.

# Multiple-line configuration is possible:
#spring.profiles.active=search.solr, \
#  51degrees.context.provider, \
#  dxa.no-cache

#spring.profiles.active=<list of values>
#spring.profiles.include=<list of values>

# adf.context.provider - Activates ADF instead of Context Service for context claims.
#spring.profiles.include=adf.context.provider
# 51degrees.context.provider - Activates 51 Degrees as a context provider; requires dxa-51degrees-module where is also enabled in properties.
#spring.profiles.include=51degrees.context.provider

# dynamic.navigation.provider - Activates Dynamic Navigation keyword-based navigation provider instead of SiteMap-based static one.
#spring.profiles.include=dynamic.navigation.provider

# dxa.no-cache - Disables DXA cache completely, doesn't affect CIL cache.
#spring.profiles.include=dxa.no-cache

# auto.dd4t.ms.provider - Automatically configures DD4T MS provider. Only needed if you do use this provider. By default, you don't.
#spring.profiles.include=auto.dd4t.ms.provider

### ===================================================================================================================
### DXA cache management
### ===================================================================================================================

# DXA tries to use CIL cache if possible. It is possible if CIL uses GeneralCacheProvider, then all the setting are compatible with DXA cache.
# If not, then DXA uses the following configuration file instead:
#dxa.caching.configuration=ehcache.xml

# If you want to disable a specific DXA cache and leave others, you can add its name to this property separated by comma.
# Values: [defaultCache (not specific usage), pages, entities, sitemaps, model-service (requests to MS), failures (exceptions), output (HTML output)]
#dxa.caching.disabled.caches=

# Caches are created lazily, when needed. But some of the caches are needed from the very beginning.
# This slows a bit a startup but makes the very first request a bit faster. You will be probably happy with default value.
# If cache is configured in ehcache.xml file, then it's also created, no matter what is configured in this property.
# Values: [defaultCache (not specific usage), pages, entities, sitemaps, model-service (requests to MS), failures (exceptions), output (HTML output)]
dxa.caching.required.caches=defaultCache, failures

### ===================================================================================================================
### Model Service client configuration
### ===================================================================================================================

# By default DXA gets the URL of Model Service through Discovery Service. If you are not happy with this for any reason,
# you can specify the URL to your Model Service which will be used instead.
#dxa.model.service.url=http://localhost:8998/

# Model Service doesn't have its own CIS capability and registers as a part of Content Service. This property sets a key name for the URL in extension properties of CS.
#dxa.model.service.key=dxa-model-service

# These for properties set a default mapping of MS REST endpoints. Unless you really know what you're doing, don't change them.
#dxa.model.service.url.entity.model=/EntityModel/{uriType}/{localizationId}/{componentId}-{templateId}
#dxa.model.service.url.page.model=/PageModel/{uriType}/{localizationId}/{pageUrl}?includes={pageInclusion}
#dxa.model.service.url.api.navigation=/api/navigation/{localizationId}
#dxa.model.service.url.api.navigation.subtree=/api/navigation/{localizationId}/subtree/{siteMapId}?includeAncestors={includeAncestors}&descendantLevels={descendantLevels}

### ===================================================================================================================
### Web MVC, view resolving, etc.
### ===================================================================================================================

# Prefix for view names with the full path to the folder where all views are found.
#dxa.web.views.prefix=/WEB-INF/Views/

# Default file extension for views.
#dxa.web.views.suffix=.jsp

# If the view is in a JAR file, then the path is also prepended with this value.
#dxa.web.views.folder=/META-INF/resources/

# Name of the folder where you can override any view.
# The path to your view is then: prefix + override + path + suffix (e.g. /WEB-INF/Views/Override/Core/Entity/Article.jsp)
#dxa.web.views.override.folder=Override/

# Default Area Name for views.
#dxa.web.default.area.name=Core

# Default Region Name for views.
#dxa.web.default.region.name=Main

# Default Controller Name for views.
#dxa.web.default.controller.name=Entity

# Default Controller Area Name for views.
#dxa.web.default.controller.area.name=Framework

# Default Action Name for views.
#dxa.web.default.action.name=Entity

# Whether you want DXA to start and register all default filters and services. Most probably you want it default. Values: [true, false]
#dxa.web.default.init=true

# Whether ADF is enabled. Disabling ADF results in a significant performance gain,
# but ADF is needed for XPM Session Preview, Experience Optimization and Context Expressions. Values: [true, false]
dxa.web.adf.enabled=false

### ===================================================================================================================
### Others
### ===================================================================================================================

# In JSON representation of a page, verifies if this is an XPM-enabled environment and serializes objects accordingly. Values: [true, false].
#dxa.json.xpm.aware=true

# These five properties define markers and default names for API used in Taxonomy-based navigation.
#dxa.tridion.navigation.modelUrl=/navigation.json
#dxa.tridion.navigation.taxonomy.marker=[Navigation]
#dxa.tridion.navigation.taxonomy.type.structureGroup=StructureGroup
#dxa.tridion.navigation.taxonomy.type.taxonomyNode=TaxonomyNode
#dxa.tridion.navigation.taxonomy.type.page=Page

#@formatter:on
